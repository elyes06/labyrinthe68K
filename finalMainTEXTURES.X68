*-----------------------------------------------------------
* Title      :
* Written by :
* Date       :
* Description:
*-----------------------------------------------------------
    ORG    $100
	*PROGRAMME
	MOVE.L #$00a692b0,D1
    JSR SET_FILL_COLOR
    JSR SET_PEN_COLOR
    MOVE #31,D1
    MOVE #24,D2
    JSR DRAW_BOX
	LEA.L TITLE,A1
	JSR OPEN_FILE
	MOVE.L #2653,D2
	JSR READ_FILE
	JSR CLOSE_FILE
	JSR AFFSTRING
    JSR SAISCAR
    CMP #$1B,D1 * ESCAPE
    BEQ FINPRG
    MOVE.L #0,A1
	MOVE.L #0,LEVEL
LEVELS:	
    CMP.L #3,LEVEL
    BEQ STOP
    ADD.L #1,LEVEL
    JSR GENERATE_WALLS
	
    LEA.L MAP,A0
	LEA.L VOID_X,A1
	LEA.L VOID_Y,A2
	
    MOVE.L #1,START_X
    MOVE.L #1,START_Y
    
    MOVE.L #1,D7
    MOVE.L #1,D6
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)
    
    MOVE.L #0,OMEGA
    MOVE.L #2,DELTA
	JSR PATH_GENERATOR

START:

    JSR DRAW_MAP
    JSR MOVEMENT

STOP:

    MOVE.L #$00a692b0,D1
    JSR SET_FILL_COLOR
    JSR SET_PEN_COLOR
    
    MOVE #0,D7
LOOP_BUG:
    MOVE.L #0,D2
    MOVE.L D7,D1
    CMP.L #32,D7
    BEQ CONTINUE_BUG
    JSR DRAW_BOX
    ADD.L #1,D7
    BRA LOOP_BUG
CONTINUE_BUG:	
    LEA.L FINALE,A1
	JSR OPEN_FILE
	MOVE.L #2685,D2
	LEA.L FINALE,A1
	JSR READ_FILE
	JSR CLOSE_FILE
	JSR AFFSTRING
	

    JMP FINPRG

** PLAYER
MOVEMENT:
    MOVE.L #$000AAE40,D1
    JSR SET_FILL_COLOR
    *MOVE.L #$00AAFAAA,D1
    MOVE.L #$0017141c,D1
    JSR SET_PEN_COLOR
   
    
    
    MOVE.L #1,PLAYER_X
    MOVE.L #1,PLAYER_Y
    
    MOVE.L PLAYER_X,D1
    MOVE.L PLAYER_Y,D2
    JSR DRAW_BOX
REWINDING:


    
    MOVE.W #$5000,D1
    JSR POS_CURS
    MOVE.L #0,D1
    JSR SAISCAR

    CMP #$77,D1 * w minuscule
    BEQ TOP
    CMP #$57,D1 * W MAJUSCULE
    BEQ TOP
    CMP #$7A,D1 * z minuscule
    BEQ TOP
    CMP #$5A,D1 * Z MAJUSCULE
    BEQ TOP
    CMP #$61,D1 * q minuscule
    BEQ LEFT
    CMP #$51,D1 * Q MAJUSCULE
    BEQ LEFT
    CMP #$71,D1 * a minuscule
    BEQ LEFT
    CMP #$41,D1 * A MAJUSCULE
    BEQ LEFT
    CMP #$64,D1 * d minuscule
    BEQ RIGHT
    CMP #$44,D1 * D MAJUSCULE
    BEQ RIGHT
    CMP #$73,D1 * s minuscule
    BEQ BOT
    CMP #$53,D1 * S MAJUSCULE
    BEQ BOT
    CMP #$1B,D1 * ESCAPE
    BEQ STOP
    BRA REWINDING
    
TOP:
    *BORDERS PREVENT
    SUB.L #1,PLAYER_Y
    CMP.L #0,PLAYER_Y
    BLT REWINDING_TOP
    ADD.L #1,PLAYER_Y
    
    *WALLS PREVENT
    LEA.L MAP,A0
    SUB.L #1,PLAYER_Y
    
    MOVE.L PLAYER_X, D5
    MOVE.L PLAYER_Y, D6
    JSR GENERATE_CHANGING_COORDS
    
    CMP.B #2,(A0,D7)
    BEQ LEVELS
    
    CMP.B #1,(A0, D7)
    BEQ REWINDING_TOP
    ADD.L #1,PLAYER_Y
    
    
    JSR GET_COLOR
    JSR SET_FILL_COLOR
    MOVE.L PLAYER_X,D1
    MOVE.L PLAYER_Y,D2
    JSR DRAW_BOX
    
    SUB.L #1,PLAYER_Y
    

    MOVE.L #$00a692b0,D1
    
    JSR SET_FILL_COLOR
    
    MOVE.L PLAYER_X,D1
    MOVE.L PLAYER_Y,D2
    JSR DRAW_BOX
    BRA REWINDING
LEFT:
    *BORDERS PREVENT
    SUB.L #1,PLAYER_X
    CMP.L #0,PLAYER_X
    BLT REWINDING_LEFT
    ADD.L #1,PLAYER_X
    
    *WALLS PREVENT
    LEA.L MAP,A0
    SUB.L #1,PLAYER_X
    MOVE.L PLAYER_X, D5
    MOVE.L PLAYER_Y, D6
    JSR GENERATE_CHANGING_COORDS
    
    CMP.B #2,(A0,D7)
    BEQ LEVELS

    CMP.B #1,(A0, D7)
    BEQ REWINDING_LEFT
    ADD.L #1,PLAYER_X

    JSR GET_COLOR
    JSR SET_FILL_COLOR
    MOVE.L PLAYER_X,D1
    MOVE.L PLAYER_Y,D2
    JSR DRAW_BOX
    SUB.L #1,PLAYER_X
    
    *MOVE.L #$000A,D7
    *JSR RANDOM_COLOR
    MOVE.L #$00a692b0,D1
    JSR SET_FILL_COLOR

    MOVE.L PLAYER_X,D1
    MOVE.L PLAYER_Y,D2
    JSR DRAW_BOX
    BRA REWINDING
RIGHT:
    *BORDERS PREVENT
    ADD.L #1,PLAYER_X
    CMP.L #31,PLAYER_X
    BGT REWINDING_RIGHT
    SUB.L #1,PLAYER_X
    
    *WALLS PREVENT
    LEA.L MAP,A0
    ADD.L #1,PLAYER_X
    MOVE.L PLAYER_X, D5
    MOVE.L PLAYER_Y, D6
    JSR GENERATE_CHANGING_COORDS
    
    CMP.B #2,(A0,D7)
    BEQ LEVELS

    CMP.B #1,(A0, D7)
    BEQ REWINDING_RIGHT
    SUB.L #1,PLAYER_X
    
    JSR GET_COLOR
    JSR SET_FILL_COLOR
    MOVE.L PLAYER_X,D1
    MOVE.L PLAYER_Y,D2
    JSR DRAW_BOX
    ADD.L #1,PLAYER_X
    
    MOVE.L #$00a692b0,D1
    
    JSR SET_FILL_COLOR
    
    MOVE.L PLAYER_X,D1
    MOVE.L PLAYER_Y,D2
    JSR DRAW_BOX
    BRA REWINDING
BOT:
        
    *BORDERS PREVENT
    ADD.L #1,PLAYER_Y
    CMP.L #23,PLAYER_Y
    BGT REWINDING_BOT
    SUB.L #1,PLAYER_Y

    *WALLS PREVENT
    LEA.L MAP,A0
    ADD.L #1,PLAYER_Y
    MOVE.L PLAYER_X, D5
    MOVE.L PLAYER_Y, D6
    JSR GENERATE_CHANGING_COORDS
    
    CMP.B #2,(A0,D7)
    BEQ LEVELS

    CMP.B #1,(A0, D7)
    BEQ REWINDING_BOT
    SUB.L #1,PLAYER_Y
    
    
    JSR GET_COLOR
    JSR SET_FILL_COLOR
    
    MOVE.L PLAYER_X,D1
    MOVE.L PLAYER_Y,D2
    JSR DRAW_BOX

    ADD.L #1,PLAYER_Y

    *MOVE.L #$000A,D7
    *JSR RANDOM_COLOR   
    MOVE.L #$00a692b0,D1
    
    JSR SET_FILL_COLOR
    
    MOVE.L PLAYER_X,D1
    MOVE.L PLAYER_Y,D2
    JSR DRAW_BOX
    BRA REWINDING



REWINDING_RIGHT:
    SUB.L #1,PLAYER_X
    BRA REWINDING
REWINDING_LEFT:
    ADD.L #1,PLAYER_X
    BRA REWINDING
REWINDING_TOP:
    ADD.L #1,PLAYER_Y
    BRA REWINDING
REWINDING_BOT:
    SUB.L #1,PLAYER_Y
    BRA REWINDING    

FIN:
    RTS    
    


GET_COLOR:
    *MOVE.L #$00AAFAAA,D1
    MOVE.L #$0017141c,D1
    LEA.L MAP,A0
    MOVE.L PLAYER_X,D5
    MOVE.L PLAYER_Y,D6
    JSR GENERATE_CHANGING_COORDS
    CMP.B #2,(A0, D7)
    BEQ GET_COLOR_WIN
    CMP.B #0,(A0, D7)
    BEQ GET_COLOR_SPAWN
    RTS
GET_COLOR_SPAWN:
    MOVE.L #$00FF0099,D1
    RTS
GET_COLOR_WIN:
    MOVE.L #$00000099,D1
    RTS
GENERATE_CHANGING_COORDS:
    MOVE.L D6, D7
    MULU #32, D7
    ADD.L D5, D7
    RTS
    
    
** DRAW_MAP
DRAW_MAP:
    LEA.L MAP,A0
    MOVE.L #0,D5
    MOVE.L #0,D6
DRAW_MAP_LOOP:
    MOVE.L D6,D7
    MULU #32,D7
    ADD.L D5,D7
** set color depending on (A0,D7)
    
    JSR GEN_COLOR
    
*    MOVE.L D5,D1
*    MOVE.L D6,D2
  
*    JSR DRAW_TEXTURE
*SKIP_TEXTURE:   
*    JSR SET_PEN_COLOR
*    JSR SET_FILL_COLOR 
    
*    MOVE.L D5,D1
*    MOVE.L D6,D2
*    JSR DRAW_BOX
** increment X then check if y equals 24
SKIP_SIMPLE_BLOC:
    CMP.L #31, D5
    BEQ DRAW_MAP_YFIX
    ADD.L #1, D5
DRAW_MAP_LOOP_RESUME:
    cmp.L #24, D6
    BEQ RTS_LTE
    BRA DRAW_MAP_LOOP
DRAW_MAP_YFIX:
    ADD.L #1, D6
    MOVE.L #0, D5
    BRA DRAW_MAP_LOOP_RESUME
**////////////////////////////////////**	
** generate walls where one row is 1/0/1/0 
** and the row after that is filled with 1s, so on
GENERATE_WALLS:
    LEA.L MAP,A0
    MOVE.L #0,D7
    MOVE.L #0,D6
GENERATE_WALLS_LOOP:
    JSR GET_COORDS

    MOVE.L D7,D3
    DIVU #2,D3
    LSR.L #8,D3
    LSR.L #8,D3

    CMP.L #0,D3
    BEQ PUT_ONE

    MOVE.L D6, D3
    DIVU #2, D3
    LSR.L #8, D3
    LSR.L #8, D3

    CMP.L #0, D3
    BEQ PUT_ONE
    MOVE.B #0, (A0, D4)
GENERATE_WALLS_RETURN:
    CMP.L #31, D7
    BEQ GENERATE_WALLS_Y

    ADD.L #1, D7
    BRA GENERATE_WALLS_LOOP
PUT_ONE:
    MOVE.B #1, (A0, D4)
    BRA GENERATE_WALLS_RETURN

GENERATE_WALLS_Y:
    ADD.L #1, D6
    MOVE.L #0, D7
    CMP.L #24, D6
    BEQ RTS_LTE
    BRA GENERATE_WALLS_LOOP
**/////////////////////////////////**	
** a function to generate coordinations in our "2d tab"
GET_COORDS:
    MOVE.L #32,D4
    MULU D6,D4
    ADD.L D7,D4
    RTS	
**////////////////////////////////**
RTS_LTE:
    RTS
**////////////////////////////////**
** generate path algorithm
PATH_GENERATOR:
    MOVE.B #40,$0(A1)
    MOVE.B #40,$0(A2)
    MOVE.B #40,$1(A1)
    MOVE.B #40,$1(A2)
    MOVE.L #0,OMEGA
    JSR FIND_CLOSEST_TO_START
    
FIND_CLOSEST_TO_START:
    MOVE.L START_X,D7
    MOVE.L START_Y,D6
    ADD.L DELTA,D7
    
    BRA FIND_CLOSEST_TO_START_FROM_X
CONTINUE_FIND_CLOSEST_TO_START:
    
    MOVE.L START_X,D7
    MOVE.L START_Y,D6
    
    CMP.L #24,DELTA
    BPL BEFORE_CLOSEST_TO_START
    ADD.L DELTA,D6
    BRA FIND_CLOSEST_TO_START_FROM_Y
    
FIND_CLOSEST_TO_START_FROM_X:
    MOVE.L START_Y,D5
    ADD.L DELTA,D5
    CMP.L D5,D6
    BGT CONTINUE_FIND_CLOSEST_TO_START
	
	JSR GET_COORDS
	CMP.B #3,(A0,D4)
	BEQ SKIP_CLOSEST_TO_START_FROM_X
	
    MOVE.L D7,D3
	ADD.L D6,D3
	
	MOVE.B $0(A1),D2
	ADD.B $0(A2),D2
	
	CMP.B D2,D3 
	BMI SAVE_CLOSEST_TO_START_X1
	BEQ SAVE_CLOSEST_TO_START_X2
	
SKIP_CLOSEST_TO_START_FROM_X:
    ADD.L #2,D6
    BRA FIND_CLOSEST_TO_START_FROM_X

SAVE_CLOSEST_TO_START_X1:
    MOVE.L OMEGA,D0
    
    MOVE.B D7,(A1,D0)
    MOVE.B D6,(A2,D0)
    BRA SKIP_CLOSEST_TO_START_FROM_X
    
SAVE_CLOSEST_TO_START_X2:
    ADD.L #1,OMEGA
    MOVE.L OMEGA,D0
    
    MOVE.B D7,(A1,D0)
    MOVE.B D6,(A2,D0)
    BRA SKIP_CLOSEST_TO_START_FROM_X    

    
FIND_CLOSEST_TO_START_FROM_Y:
    MOVE.L START_X,D5
    ADD.L DELTA,D5
    CMP.L D5,D7
    BGT BEFORE_CLOSEST_TO_START
	
	JSR GET_COORDS
	CMP.B #3,(A0,D4)
	BEQ SKIP_CLOSEST_TO_START_FROM_Y
	
    MOVE.L D7,D3
	ADD.L D6,D3
	
	MOVE.B $0(A1),D2
	ADD.B $0(A2),D2
	
    CMP.B D2,D3 
	BMI SAVE_CLOSEST_TO_START_Y1
	BEQ SAVE_CLOSEST_TO_START_Y2

SKIP_CLOSEST_TO_START_FROM_Y:
    ADD.L #2,D7
    BRA FIND_CLOSEST_TO_START_FROM_Y
    
SAVE_CLOSEST_TO_START_Y1:
    MOVE.L OMEGA,D0
    
    MOVE.B D7,(A1,D0)
    MOVE.B D6,(A2,D0)
    BRA SKIP_CLOSEST_TO_START_FROM_Y
    
SAVE_CLOSEST_TO_START_Y2:
    ADD.L #1,OMEGA
    MOVE.L OMEGA,D0
    
    MOVE.B D7,(A1,D0)
    MOVE.B D6,(A2,D0)
    BRA SKIP_CLOSEST_TO_START_FROM_Y    

BEFORE_CLOSEST_TO_START:
    CMP.B #40,$0(A1)
    BNE PROCESS_CLOSEST_TO_START
    
    ADD.L #2,DELTA
    CMP.L #32,DELTA
    BEQ GEN_SPAWN_WIN
    
    BRA PATH_GENERATOR
PROCESS_CLOSEST_TO_START:
    CLR.L D7
    CLR.L D6
    MOVE.B $0(A1),D7
    MOVE.B $0(A2),D6
    
    CMP.L #0,OMEGA
    BEQ SKIP_RAND
    
    JSR RAND
    AND.B #%00000001,D1
    CMP.B #0,D1
    BEQ SKIP_RAND
    
    CLR.L D1
    CLR.L D0
    MOVE.B $1(A1),D1
    MOVE.B $1(A2),D0
    
    MOVE.B D1,$0(A1)
    MOVE.B D0,$0(A2)
SKIP_RAND:
    CLR.L D7
    CLR.L D6
    MOVE.B $0(A1),D7
    MOVE.B $0(A2),D6
    
    JSR RAND
    AND.B #%00000011,D1
    CMP.B #0,D1
    BEQ PROCESS_CLOSEST_TO_START_X_POS
    CMP.B #1,D1
    BEQ PROCESS_CLOSEST_TO_START_X_NEG
    CMP.B #2,D1
    BEQ PROCESS_CLOSEST_TO_START_Y_POS
    BRA PROCESS_CLOSEST_TO_START_Y_NEG

PROCESS_CLOSEST_TO_START_X_POS:
    ADD.L #2,D7
    CMP.L #32,D7
    BPL SKIP_RAND
    
    JSR GET_COORDS
    CMP.B #3,(A0,D4)
    BNE SKIP_RAND
    
    **FILL
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)
    SUB.L #1,D7
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)
    SUB.L #1,D7
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)

    BRA FIND_CLOSEST_TO_LAST
    
PROCESS_CLOSEST_TO_START_Y_POS:
    ADD.L #2,D6
    CMP.L #24,D6
    BPL SKIP_RAND
    
    JSR GET_COORDS
    CMP.B #3,(A0,D4)
    BNE SKIP_RAND
    
    **FILL
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)
    SUB.L #1,D6
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)
    SUB.L #1,D6
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)

    BRA FIND_CLOSEST_TO_LAST

PROCESS_CLOSEST_TO_START_X_NEG:
    SUB.L #2,D7
    CMP.L #0,D7
    BLE SKIP_RAND
    
    JSR GET_COORDS
    CMP.B #3,(A0,D4)
    BNE SKIP_RAND
    
    **FILL
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)
    ADD.L #1,D7
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)
    ADD.L #1,D7
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)

    BRA FIND_CLOSEST_TO_LAST
    
PROCESS_CLOSEST_TO_START_Y_NEG:
    SUB.L #2,D6
    CMP.L #0,D6
    BLE SKIP_RAND
    
    JSR GET_COORDS
    CMP.B #3,(A0,D4)
    BNE SKIP_RAND
    
    **FILL
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)
    ADD.L #1,D6
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)
    ADD.L #1,D6
    JSR GET_COORDS
    MOVE.B #3,(A0,D4)

    BRA FIND_CLOSEST_TO_LAST
FIND_CLOSEST_TO_LAST:
    CLR.L D7
    CLR.L D6
    MOVE.B $0(A1),D7
    MOVE.B $0(A2),D6
    
    CMP.L #23,D6
    BPL PATH_GENERATOR
    CMP.L #31,D7
    BPL PATH_GENERATOR
    
    JSR RAND
    AND.B #%00000011,D1
    
    CMP.B #0,D1
    BEQ PROCESS_CLOSEST_TO_LAST_X_POS
    CMP.B #1,D1
    BEQ PROCESS_CLOSEST_TO_LAST_X_NEG
    CMP.B #2,D1
    BEQ PROCESS_CLOSEST_TO_LAST_Y_POS
    BRA PROCESS_CLOSEST_TO_LAST_Y_NEG

PROCESS_CLOSEST_TO_LAST_X_POS:
    ADD.L #2,D7
    CMP.L #32,D7
    BPL FIND_CLOSEST_TO_LAST
    
    JSR GET_COORDS
	CMP.B #0,(A0,D4)
	BNE FIND_CLOSEST_TO_LAST
	
	MOVE.B #3,(A0,D4)
	SUB.L #1,D7
	JSR GET_COORDS
	MOVE.B #3,(A0,D4)
	SUB.L #1,D7
	JSR GET_COORDS
	MOVE.B #3,(A0,D4)
	
	BRA PATH_GENERATOR
	
PROCESS_CLOSEST_TO_LAST_Y_POS:
    ADD.L #2,D6
    CMP.L #24,D6
    BPL FIND_CLOSEST_TO_LAST
    
    JSR GET_COORDS
	CMP.B #0,(A0,D4)
	BNE FIND_CLOSEST_TO_LAST
	
	MOVE.B #3,(A0,D4)
	SUB.L #1,D6
	JSR GET_COORDS
	MOVE.B #3,(A0,D4)
	SUB.L #1,D6
	JSR GET_COORDS
	MOVE.B #3,(A0,D4)
	
	BRA PATH_GENERATOR

PROCESS_CLOSEST_TO_LAST_X_NEG:
    SUB.L #2,D7
    CMP.L #0,D7
    BLE FIND_CLOSEST_TO_LAST
    
    JSR GET_COORDS
	CMP.B #0,(A0,D4)
	BNE FIND_CLOSEST_TO_LAST
	
	MOVE.B #3,(A0,D4)
	ADD.L #1,D7
	JSR GET_COORDS
	MOVE.B #3,(A0,D4)
	ADD.L #1,D7
	JSR GET_COORDS
	MOVE.B #3,(A0,D4)
	
	BRA PATH_GENERATOR
	
PROCESS_CLOSEST_TO_LAST_Y_NEG:
    SUB.L #2,D6
    CMP.L #0,D6
    BLE FIND_CLOSEST_TO_LAST
    
    JSR GET_COORDS
	CMP.B #0,(A0,D4)
	BNE FIND_CLOSEST_TO_LAST
	
	MOVE.B #3,(A0,D4)
	ADD.L #1,D6
	JSR GET_COORDS
	MOVE.B #3,(A0,D4)
	ADD.L #1,D6
	JSR GET_COORDS
	MOVE.B #3,(A0,D4)
	
	BRA PATH_GENERATOR
**////////////////////////**
GEN_SPAWN_WIN:
    
    MOVE.L #1,D7
    MOVE.L #1,D6
    JSR GET_COORDS
    MOVE.B #0,(A0,D4)
    
    MOVE.L #31,D7
    MOVE.L #23,D6
    JSR GET_COORDS
    MOVE.B #2,(A0,D4)
	
	BRA START
**///////////////////////**
DRAW_TITLE:
    MOVE.L #2653,D2
    JSR READ_FILE
    JSR AFFSTRING
    RTS
*DRAW_FINALE:
*    LEA.L DRAWTITLE,A1
*    MOVE.L #2653,D2
*    JSR READ_FILE
*    LEA.L DRAWTITLE,A1
*    JSR AFFSTRING
*    RTS
	
	*INCLUDE
	INCLUDE 'TEXTURE.X68'
	INCLUDE 'PERIPH.X68'
	INCLUDE 'BIBLIO.X68'
	
	*VARIABLES
	FINALE: DC.B 'finalscreen.txt',0
    
	MAP: DS.B 768
	
	
    
    
    
    
	
	
	LAST_X: DS.L 1
	LAST_Y: DS.L 1

	LEVEL: DS.L 1
	
	FILE: DS.L 1
    
	START_X: DS.L 1
	START_Y: DS.L 1
    
    WIN_X: DS.L 1
    WIN_Y: DS.L 1
    
    VOID_X: DS.L 2
    VOID_Y: DS.L 2

    DELTA: DS.L 1
    OMEGA: DS.L 1
    
    PLAYER_X: DS.L 1
    PLAYER_Y: DS.L 1
    
    
    
    TEXTURE: DC.B 'crtinge.bmp',0
    
    TITLE: DC.B 'title.txt',0
    
    

        
	
	
    
    
    
    END $100





*~Font name~Courier New~
*~Font size~12~
*~Tab type~1~
*~Tab size~4~
